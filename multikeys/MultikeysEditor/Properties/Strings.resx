<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DeadKeyReplacementFrom" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="DeadKeyReplacements" xml:space="preserve">
    <value>Replacements</value>
  </data>
  <data name="DeadKeyReplacementTo" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="ExecutableKeyArguments" xml:space="preserve">
    <value>Arguments</value>
  </data>
  <data name="ExecutableKeyCommand" xml:space="preserve">
    <value>Command</value>
  </data>
  <data name="KeyPress" xml:space="preserve">
    <value>Key press</value>
  </data>
  <data name="KeyRelease" xml:space="preserve">
    <value>Key release</value>
  </data>
  <data name="MacroSequence" xml:space="preserve">
    <value>Sequence</value>
  </data>
  <data name="Modifiers" xml:space="preserve">
    <value>Modifiers</value>
  </data>
  <data name="ReadableNameDeadkey" xml:space="preserve">
    <value>Dead key</value>
  </data>
  <data name="ReadableNameExecutablekey" xml:space="preserve">
    <value>Command key</value>
  </data>
  <data name="ReadableNameMacroKey" xml:space="preserve">
    <value>Macro key</value>
  </data>
  <data name="ReadableNameUnicodeKey" xml:space="preserve">
    <value>Text key</value>
  </data>
  <data name="ThisKeyIsNotRemapped" xml:space="preserve">
    <value>This key is not remapped.</value>
  </data>
  <data name="VirtualKeyCode" xml:space="preserve">
    <value>Virtual key code</value>
  </data>
  <data name="KeyOptionsAssignCommand" xml:space="preserve">
    <value>Assign command</value>
  </data>
  <data name="KeyOptionsEditCommand" xml:space="preserve">
    <value>Edit command</value>
  </data>
  <data name="KeyOptionsRegisterModifier" xml:space="preserve">
    <value>Register as modifier</value>
  </data>
  <data name="KeyOptionsRemoveCommand" xml:space="preserve">
    <value>Remove command</value>
  </data>
  <data name="KeyOptionsUnregisterModifier" xml:space="preserve">
    <value>Unregister as modifier</value>
  </data>
  <data name="ReadableNameModifier" xml:space="preserve">
    <value>Modifier key</value>
  </data>
  <data name="WindowTitleEditCommandDialog" xml:space="preserve">
    <value>Edit command</value>
  </data>
  <data name="WindowTitleNewCommandDialog" xml:space="preserve">
    <value>New command</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="KeyboardName" xml:space="preserve">
    <value>Unique id: </value>
    <comment>For displaying the name of a keyboard</comment>
  </data>
  <data name="MenuFile" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="MenuFileClose" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="MenuFileNew" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="MenuFileOpen" xml:space="preserve">
    <value>Open...</value>
  </data>
  <data name="MenuFileSave" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="MenuFileSaveAs" xml:space="preserve">
    <value>Save as...</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
    <comment>Generic "no"</comment>
  </data>
  <data name="None" xml:space="preserve">
    <value>None</value>
    <comment>For displaying the name of a nameless keyboard</comment>
  </data>
  <data name="PromptUnicodePromptInput" xml:space="preserve">
    <value>Insert one or more Unicode characters:</value>
  </data>
  <data name="PromptUnicodeSelectedCharacterBlock" xml:space="preserve">
    <value>Block: </value>
  </data>
  <data name="PromptUnicodeSelectedCharacterCategory" xml:space="preserve">
    <value>Category: </value>
  </data>
  <data name="PromptUnicodeSelectedCharacterCodepoint" xml:space="preserve">
    <value>Codepoint: </value>
  </data>
  <data name="PromptUnicodeSelectedCharacterName" xml:space="preserve">
    <value>Name: </value>
  </data>
  <data name="PromptUnicodeTriggerOnRepeat" xml:space="preserve">
    <value>Trigger repeatedly when key is pressed down</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="WarningNoLayout" xml:space="preserve">
    <value>No layout is currently open.</value>
  </data>
  <data name="WarningWillOverwriteWorkingLayout" xml:space="preserve">
    <value>Unsaved changes will be lost. Proceed?</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
    <comment>Generic "yes"</comment>
  </data>
  <data name="KeyboardAlias" xml:space="preserve">
    <value>Name: </value>
    <comment>User-given name for a device</comment>
  </data>
  <data name="KeyboardNameDialogAnyKeyboard" xml:space="preserve">
    <value>(Any keyboard)</value>
  </data>
  <data name="KeyboardNameDialogFinish" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="KeyboardNameDialogListenForInput" xml:space="preserve">
    <value>Detect keyboard</value>
    <comment>Wait for the user to press a key</comment>
  </data>
  <data name="KeyboardNameDialogPressAnyKey" xml:space="preserve">
    <value>Press a key on the keyboard you wish to detect.</value>
  </data>
  <data name="KeyboardNameDialogUseAnyKeyboard" xml:space="preserve">
    <value>Use any keyboard</value>
  </data>
  <data name="KeyboardNameEdit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="WindowTitleKeyboardAliasDialog" xml:space="preserve">
    <value>Edit keyboard's name</value>
  </data>
  <data name="WindowTitleKeyboardNameDialog" xml:space="preserve">
    <value>Edit keyboard's unique id</value>
  </data>
  <data name="WindowTitleMainWindow" xml:space="preserve">
    <value>Multikeys - Main Window</value>
  </data>
  <data name="WarningSaveLayoutToStart" xml:space="preserve">
    <value>You must save the layout in order to use it. Save it now?</value>
  </data>
  <data name="CoreStatePaused" xml:space="preserve">
    <value>Current state: Paused</value>
  </data>
  <data name="CoreStateRunning" xml:space="preserve">
    <value>Current state: Running</value>
  </data>
  <data name="CoreStateStopped" xml:space="preserve">
    <value>Current state: Stopped</value>
  </data>
  <data name="Confirmation" xml:space="preserve">
    <value>Confirmation</value>
    <comment>Generic "confirmation"</comment>
  </data>
  <data name="WarningRemoveCommand" xml:space="preserve">
    <value>Remove this command?</value>
  </data>
  <data name="PromptModifierAddToExistingModifier" xml:space="preserve">
    <value>Add to existing modifier:</value>
  </data>
  <data name="PromptModifierNewModfier" xml:space="preserve">
    <value>New modifier:</value>
  </data>
  <data name="PromptModifierConfirm" xml:space="preserve">
    <value>Register modifier</value>
  </data>
  <data name="WindowTitleNewModifierDialog" xml:space="preserve">
    <value>Register key as modifier</value>
  </data>
  <data name="WarningRemoveModifier" xml:space="preserve">
    <value>Unregister this modifier?</value>
  </data>
  <data name="WarningModifierOverridesCommands" xml:space="preserve">
    <value>Warning: This key is remapped in other layers. Setting this key as modifier will take precedence over those remaps. Proceed?</value>
  </data>
  <data name="KeyOptionsChangeModifierName" xml:space="preserve">
    <value>Change modifier name</value>
  </data>
  <data name="PromptChangeModifierNameConfirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="PromptChangeModifierNameText" xml:space="preserve">
    <value>Choose a new name for the modifier:</value>
  </data>
  <data name="WindowTitleChangeModifierName" xml:space="preserve">
    <value>Change modifier name</value>
  </data>
  <data name="PromptChangeModifierNameAlreadyExists" xml:space="preserve">
    <value>Name already exists.</value>
  </data>
  <data name="PromptChangeModifierNameInvalidText" xml:space="preserve">
    <value>Please, input a valid name.</value>
  </data>
  <data name="LogFailedToCreateLog" xml:space="preserve">
    <value>There was an error during the program's execution. A log file could not be created. Error:</value>
    <comment>To be followed by a space and the error message.</comment>
  </data>
  <data name="LogFailedToWriteToLog" xml:space="preserve">
    <value>There was an error during the program's execution. Could not write to log file. Error:</value>
    <comment>To be followed by a space and the error message.</comment>
  </data>
  <data name="LogSeeLog" xml:space="preserve">
    <value>There was an error during the program's execution. For details, see the log file at</value>
    <comment>To be followed by a space and the log file's name</comment>
  </data>
  <data name="KeyboardControlDeleteKeyboard" xml:space="preserve">
    <value>Delete keyboard</value>
  </data>
  <data name="LayoutControlAddNewKeyboard" xml:space="preserve">
    <value>Add new keyboard</value>
  </data>
  <data name="MenuImportKeyboard" xml:space="preserve">
    <value>Import...</value>
  </data>
  <data name="KeyboardControlChangePhysicalLayout" xml:space="preserve">
    <value>Change layout</value>
  </data>
  <data name="WindowTitleChangeLayout" xml:space="preserve">
    <value>Change keyboard layout</value>
  </data>
  <data name="PromptChangeLayoutChoosePhysicalLayout" xml:space="preserve">
    <value>Choose the physical layout:</value>
  </data>
  <data name="PromptChangeLayoutConfirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="PromptChangeLayoutUseBigEnter" xml:space="preserve">
    <value>Use big return key</value>
  </data>
  <data name="KeyboardControlChangeLogicalLayout" xml:space="preserve">
    <value>Change labels</value>
  </data>
  <data name="PromptChangeLayoutChooseLogicalLayout" xml:space="preserve">
    <value>Choose which layout to print on the keys:</value>
  </data>
  <data name="ChooseFile" xml:space="preserve">
    <value>Choose...</value>
    <comment>For placement in a button or link</comment>
  </data>
  <data name="ChooseFileToAssignToThisKey" xml:space="preserve">
    <value>Choose file to assign to this key</value>
  </data>
  <data name="PromptExecutableArguments" xml:space="preserve">
    <value>Arguments to pass to file:</value>
  </data>
  <data name="PromptExecutableFilename" xml:space="preserve">
    <value>Select the file to open:</value>
  </data>
  <data name="PromptNewCommandAssignCommand" xml:space="preserve">
    <value>Assign Command</value>
  </data>
  <data name="WarningNoFileSelected" xml:space="preserve">
    <value>An executable file must be selected.</value>
  </data>
</root>